<?xml version="1.0" encoding="UTF-8"?>
<Procedure xmlns="http://codac.iter.org/sup/sequencer" version="1.0"
           name="SUP procedure for mirror cleaning"
           xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
           xs:schemaLocation="http://codac.iter.org/sup/sequencer sequencer.xsd">
    <Plugin>libsequencer-ca.so</Plugin>
    <Plugin>libsequencer-pvxs.so</Plugin>
    <Sequence isRoot="True">
        <Copy input="false" output="Operator-start-MC.value"/>
        <Include name="Preprocedure tests" path="TestProcedure"/>
        <Listen varNames="Operator-start-MC" forceSuccess="yes">
            <Sequence>
                <Equals lhs="Operator-start-MC.value" rhs="true"/>
                <Include name="Main Procedure" path="MainProcedure"/>
            </Sequence>
        </Listen>
    </Sequence>
    <Sequence name="TestProcedure">
        <Message text="Testing procedure..."/>
        <Output from="Operator-start-MC" description="Operator-start-MC"/>
        <Output from="MC-start" description="MC-start"/>
        <Output from="MC-time-remaining" description="MC-time-remaining"/>
        <Output from="D1-stop-request" description="D1-stop-request"/>
        <Output from="MC-stop-other" description="MC-stop-other"/>
        <Output from="MC-finished" description="MC-finished"/>
        <Output from="MC-abort" description="MC-abort"/>
        <Output from="MC-state" description="MC-state"/>
        <Output from="D1-state" description="D1-state"/>
        <Output from="System-state" description="System-state"/>
        <Output from="Operator-stop" description="Operator-stop"/>
        <Output from="Stop-time-remaining" description="Stop-time-remaining"/>
    </Sequence>
    <Sequence name="MainProcedure">
        <Include name="MC Preparation" path="MCPreparation"/>
        <Fallback>
            <Sequence>
                <Include name="MC Start" path="MCStart"/>
                <!-- MCRun always ends with a failure status, such that MCEnd will always be executed -->
                <Include name="MC Run" path="MCRun"/>
            </Sequence>
            <Include name="MC End" path="MCEnd"/>
        </Fallback>
    </Sequence>
    <Sequence name="MCPreparation">
        <Copy input="false" output="Operator-start-MC.value"/>
        <Copy input="time-reset" output="MC-time-remaining"/>
        <Copy input="false" output="D1-stop-request"/>
        <Copy input="false" output="MC-stop-other"/>
        <Copy input="false" output="MC-finished"/>
        <Copy input="abort-reset" output="MC-abort"/>
        <Copy input="two" output="MC-state"/>
    </Sequence>
    <Fallback name="MCStart">
        <Listen varNames="D1-state,Operator-stop">
            <Inverter>
                <Fallback>
                    <Equals lhs="D1-state" rhs="two"/>
                    <Equals lhs="D1-state" rhs="three"/>
                    <Equals lhs="Operator-stop" rhs="true"/>
                </Fallback>
            </Inverter>
        </Listen>
        <Sequence>
            <Inverter>
                <!-- Exit with failure operator requested stop -->
                <Equals lhs="Operator-stop" rhs="true"/>
            </Inverter>
            <Fallback>
                <Listen varNames="System-state,Operator-stop">
                    <Inverter>
                        <Fallback>
                            <Equals lhs="System-state" rhs="two"/>
                            <Equals lhs="System-state" rhs="three"/>
                            <Equals lhs="Operator-stop" rhs="true"/>
                        </Fallback>
                    </Inverter>
                </Listen>
                <Sequence>
                    <!-- Only proceed without failure if system state is running -->
                    <Equals lhs="System-state" rhs="two"/>
                    <Copy input="three" output="MC-state"/>
                </Sequence>
            </Fallback>
        </Sequence>
    </Fallback>
    <Sequence name="MCRun">
        <!-- TODO: initialize and start timer -->
        <Listen varNames="Operator-stop,D1-stop-request,D1-state,System-state">
            <Inverter>
                <Fallback>
                    <!-- Fail if any of these conditions is true -->
                    <!-- TODO: add 'time elapsed?'-->
                    <Equals lhs="Operator-stop" rhs="true"/>
                    <Equals lhs="D1-stop-request" rhs="true"/>
                    <Equals lhs="D1-state" rhs="one"/>
                    <Equals lhs="System-state" rhs="zero"/>
                    <Equals lhs="System-state" rhs="one"/>
                    <Equals lhs="System-state" rhs="three"/>
                    <Equals lhs="D1-state" rhs="five"/>
                </Fallback>
            </Inverter>
        </Listen>
    </Sequence>
    <Sequence name="MCEnd">
        <Copy input="four" output="MC-state"/>
        <Copy input="true" output="D1-stop-request"/>
        <!-- TODO: initialize and start end timer -->
        <Fallback>
            <Listen varNames="Stop-time-remaining,D1-state">
                <Inverter>
                    <Fallback>
                        <!-- Proceed if any of these conditions is true -->
                        <Equals lhs="Stop-time-remaining" rhs="time-reset"/>
                        <Equals lhs="D1-state" rhs="five"/>
                    </Fallback>
                </Inverter>
            </Listen>
            <Sequence>
                <ForceSuccess>
                    <Sequence>
                        <Equals lhs="Stop-time-remaining" rhs="time-reset"/>
                        <Copy input="abort-set" output="MC-abort"/>
                    </Sequence>
                </ForceSuccess>
                <Copy input="true" output="MC-stop-other"/>
                <Copy input="true" output="MC-finished"/>
            </Sequence>
        </Fallback>
    </Sequence>
    <Workspace>
    </Workspace>
</Procedure>
