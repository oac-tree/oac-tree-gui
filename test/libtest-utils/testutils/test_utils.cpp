/******************************************************************************
 *
 * Project       : Graphical User Interface for SUP Sequencer
 *
 * Description   : Integrated development environment for Sequencer procedures
 *
 * Author        : Gennady Pospelov (IO)
 *
 * Copyright (c) : 2010-2023 ITER Organization,
 *                 CS 90 046
 *                 13067 St. Paul-lez-Durance Cedex
 *                 France
 *
 * This file is part of ITER CODAC software.
 * For the terms and conditions of redistribution or use of this software
 * refer to the file ITER-LICENSE.TXT located in the top level directory
 * of the distribution package.
 *****************************************************************************/

#include "test_utils.h"

#include "testconfig.h"  // this file is auto generated by the build system in build directory

#include <QTest>
#include <cmath>
#include <fstream>
#include <sstream>
#include <string>
#include <thread>

namespace
{
const std::string header{R"RAW(<?xml version="1.0" encoding="UTF-8"?>
<root>)RAW"};

const std::string footer{R"RAW(</root>
)RAW"};

}  // namespace

namespace testutils
{
std::string GetTestSuiteOutputDir()
{
  return sequencergui::TestConfig::TestOutputDir();  // defined in auto-generated testconfig.h
}

std::string CreateXMLDocumentString(const std::string &body)
{
  return header + body + footer;
}

std::string GetTextFileContent(const std::string &file_name)
{
  std::ifstream in(file_name);
  std::stringstream sstr;
  while (in >> sstr.rdbuf())
  {
  }
  return sstr.str();
}

void CreateTextFile(const std::string &file_name, const std::string &content)
{
  std::ofstream file_out(file_name);
  file_out.write(content.c_str(), content.size());
}

bool WaitFor(std::function<bool()> runner, std::chrono::milliseconds timeout)
{
  const std::chrono::milliseconds timeout_precision_msec(10);
  const std::chrono::milliseconds wait_time(timeout);
  auto time_end = std::chrono::system_clock::now() + timeout;
  while (std::chrono::system_clock::now() < time_end)
  {
    if (runner())
    {
      return true;
    }
    std::this_thread::sleep_for(timeout_precision_msec);
  }
  return false;
}

double GetTimeoutInSec(std::chrono::milliseconds timeout)
{
  auto value = std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count();
  return static_cast<double>(value) / 1000;
}

}  // namespace testutils
