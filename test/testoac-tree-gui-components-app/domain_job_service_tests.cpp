/******************************************************************************
 *
 * Project       : Graphical User Interface for SUP oac-tree
 *
 * Description   : Integrated development environment for oac-tree procedures
 *
 * Author        : Gennady Pospelov (IO)
 *
 * Copyright (c) : 2010-2025 ITER Organization,
 *                 CS 90 046
 *                 13067 St. Paul-lez-Durance Cedex
 *                 France
 * SPDX-License-Identifier: MIT
 *
 * This file is part of ITER CODAC software.
 * For the terms and conditions of redistribution or use of this software
 * refer to the file LICENSE located in the top level directory
 * of the distribution package.
 *****************************************************************************/

#include "oac_tree_gui/jobsystem/domain_job_service.h"

#include <oac_tree_gui/jobsystem/log_event.h>

#include <sup/dto/anyvalue.h>
#include <sup/oac-tree/i_job_info_io.h>

#include <gtest/gtest.h>
#include <testutils/mock_domain_event_listener.h>
#include <testutils/mock_user_context.h>

#include <QTest>
#include <future>

namespace oac_tree_gui::test
{

/**
 * @brief Tests for DomainJobService.
 */
class DomainJobServiceTest : public ::testing::Test
{
public:
  DomainJobServiceTest() : m_service(CreateService()) {}
  using mock_event_listener_t = ::testing::StrictMock<test::MockDomainEventListener>;
  using mock_user_listener_t = ::testing::StrictMock<test::MockUserContext>;
  using msec = std::chrono::milliseconds;

  std::unique_ptr<DomainJobService> CreateService()
  {
    return std::make_unique<DomainJobService>(m_event_listener.CreateDispatcherContext(),
                                              m_user_listener.CreateContext());
  }

  /**
   * @brief Waits for queue to become empty within the given timeout.
   *
   * This method gives time to the queue to be filled with events generated by calls to JobInfoIO
   * interface, e.g. service->GetJobInfoIO()->Log().
   * And then it waits until the queue was emptied by mock event listeners.
   */
  static bool WaitForEmptyQueue(const DomainJobService &service, msec timeout)
  {
    // gives time for the queue to be emptied by mock event listeners
    auto predicate = [&service]() { return service.GetEventCount() == 0; };
    return QTest::qWaitFor(predicate, static_cast<int>(timeout.count()));
  }

  mock_event_listener_t m_event_listener;
  mock_user_listener_t m_user_listener;
  std::unique_ptr<DomainJobService> m_service;
};

TEST_F(DomainJobServiceTest, InstructionStateUpdated)
{
  using ::sup::oac_tree::ExecutionStatus;
  using ::sup::oac_tree::InstructionState;

  const InstructionState expected_state{false, ExecutionStatus::NOT_FINISHED};
  const sup::dto::uint32 expected_index{42};
  const std::vector<sup::dto::uint32> expected_active({42});

  const InstructionStateUpdatedEvent expected_state_event{expected_index, expected_state};
  EXPECT_CALL(m_event_listener, OnInstructionStateUpdated(expected_state_event)).Times(1);
  const ActiveInstructionChangedEvent expected_active_event{expected_active};
  EXPECT_CALL(m_event_listener, OnActiveInstructionChanged(expected_active_event)).Times(1);

  m_service->GetJobInfoIO()->InstructionStateUpdated(expected_index, expected_state);

  EXPECT_TRUE(WaitForEmptyQueue(*m_service, msec(100)));
}

TEST_F(DomainJobServiceTest, VariableUpdated)
{
  const sup::dto::uint32 index{42};
  const sup::dto::AnyValue value(43);
  const bool connected{true};

  const VariableUpdatedEvent expected_event{index, value, connected};
  EXPECT_CALL(m_event_listener, OnVariableUpdated(expected_event)).Times(1);

  m_service->GetJobInfoIO()->VariableUpdated(index, value, connected);

  EXPECT_TRUE(WaitForEmptyQueue(*m_service, msec(100)));
}

TEST_F(DomainJobServiceTest, JobStateUpdated)
{
  using ::sup::oac_tree::JobState;

  const JobState state{JobState::kRunning};

  const JobStateChangedEvent expected_event{state};
  EXPECT_CALL(m_event_listener, OnJobStateChanged(expected_event)).Times(1);

  m_service->GetJobInfoIO()->JobStateUpdated(state);

  EXPECT_TRUE(WaitForEmptyQueue(*m_service, msec(100)));
}

TEST_F(DomainJobServiceTest, PutValue)
{
  auto service = CreateService();

  const sup::dto::AnyValue value(43);
  const std::string description("description");

  EXPECT_CALL(m_event_listener, OnLogEvent(::testing::_)).Times(1);

  service->GetJobInfoIO()->PutValue(value, description);

  EXPECT_TRUE(WaitForEmptyQueue(*service, msec(100)));
}

TEST_F(DomainJobServiceTest, GetUserValue)
{
  const sup::dto::uint64 request_id{42};

  sup::dto::AnyValue initial_value{sup::dto::SignedInteger32Type, 41};
  const std::string description("description");
  const UserInputArgs args{initial_value, description};

  const sup::dto::AnyValue expected_value{sup::dto::SignedInteger32Type, 42};
  const UserInputResult expected_result{expected_value, true};

  ON_CALL(m_user_listener, OnUserInputRequest(args))
      .WillByDefault(::testing::Return(expected_result));

  EXPECT_CALL(m_user_listener, OnUserInputRequest(args)).Times(1);

  // mimick sequencer thread asking for user input
  std::promise<void> ready_for_test;
  // runner to ask for user input (blocking)
  auto runner = [this, &ready_for_test, &initial_value, &description, request_id]()
  {
    ready_for_test.set_value();
    return m_service->GetJobInfoIO()->GetUserValue(request_id, initial_value, description);
  };

  // launching runner in a thread
  std::future<bool> future_result = std::async(std::launch::async, runner);

  // waiting for threads being prepared for racing
  ready_for_test.get_future().wait();

  // waiting for the future, and still allowing event loop to function
  auto predicate = [&future_result]()
  { return future_result.wait_for(std::chrono::seconds(0)) == std::future_status::ready; };
  EXPECT_TRUE(QTest::qWaitFor(predicate, 100));

  EXPECT_TRUE(future_result.get());
  EXPECT_EQ(initial_value, expected_value);
}

TEST_F(DomainJobServiceTest, GetUserChoice)
{
  const sup::dto::uint64 request_id{42};

  const std::vector<std::string> options({"option1"});
  sup::dto::AnyValue metadata{sup::dto::SignedInteger32Type, 41};
  const UserChoiceArgs args{options, metadata};

  const int user_index_choice{1};
  const UserChoiceResult expected_result{user_index_choice, true};

  ON_CALL(m_user_listener, OnUserChoiceRequest(args))
      .WillByDefault(::testing::Return(expected_result));

  EXPECT_CALL(m_user_listener, OnUserChoiceRequest(args)).Times(1);

  // mimick sequencer thread asking for user choice
  std::promise<void> ready_for_test;
  // runner to ask for user input (blocking)
  auto runner = [this, &ready_for_test, &options, &metadata, request_id]()
  {
    ready_for_test.set_value();
    return m_service->GetJobInfoIO()->GetUserChoice(request_id, options, metadata);
  };

  // launching runner in a thread
  std::future<int> future_result = std::async(std::launch::async, runner);

  // waiting for threads being prepared for racing
  ready_for_test.get_future().wait();

  // waiting for the future, and still allowing event loop to function
  auto predicate = [&future_result]()
  { return future_result.wait_for(std::chrono::seconds(0)) == std::future_status::ready; };
  EXPECT_TRUE(QTest::qWaitFor(predicate, 100));

  EXPECT_EQ(future_result.get(), user_index_choice);
}

TEST_F(DomainJobServiceTest, Message)
{
  const std::string message("mesage");

  EXPECT_CALL(m_event_listener, OnLogEvent(::testing::_)).Times(1);

  m_service->GetJobInfoIO()->Message(message);

  EXPECT_TRUE(WaitForEmptyQueue(*m_service, msec(50)));
}

TEST_F(DomainJobServiceTest, Log)
{
  const Severity severity{Severity::kAlert};
  const std::string message("mesage");

  // can't compare log event since current comparison operator contains date and time
  EXPECT_CALL(m_event_listener, OnLogEvent(::testing::_)).Times(1);

  m_service->GetJobInfoIO()->Log(static_cast<int>(severity), message);

  EXPECT_TRUE(WaitForEmptyQueue(*m_service, msec(50)));
}

}  // namespace oac_tree_gui::test
