From d76d979ebbd5ca8615292ea11d2e595de6e313e1 Mon Sep 17 00:00:00 2001
From: Rafael Silva <rg-silva@criticalsoftware.com>
Date: Mon, 1 Jul 2024 16:49:31 +0100
Subject: [PATCH] misc: remove uda dependency

---
 src/app/pulse-counter-service/utils.cpp       |   5 -
 .../sup/pulse-counter-di/pulse_counter_di.cpp |   5 -
 .../sup/pulse-counter-di/registered_names.h   |   1 -
 src/lib/sup/pulse-counter/CMakeLists.txt      |   2 -
 src/lib/sup/pulse-counter/base/CMakeLists.txt |   1 -
 .../pulse-counter/base/uda_pulse_counter.cpp  | 148 ------------------
 6 files changed, 162 deletions(-)
 delete mode 100644 src/lib/sup/pulse-counter/base/uda_pulse_counter.cpp

diff --git a/src/app/pulse-counter-service/utils.cpp b/src/app/pulse-counter-service/utils.cpp
index 386f2d4..b64a858 100644
--- a/src/app/pulse-counter-service/utils.cpp
+++ b/src/app/pulse-counter-service/utils.cpp
@@ -75,11 +75,6 @@ void InstantiatePulseCounterService(const std::string& service_name,
     CheckSuccessErrorCode(sup::di::GlobalObjectManager().CreateInstance(
       MEMORY_BASED_PULSE_COUNTER, PULSE_COUNTER_INTERFACE_INSTANCE, {}));
   }
-  else if (persistence_type == UDA_PERSISTENCE_TYPE)
-  {
-    CheckSuccessErrorCode(sup::di::GlobalObjectManager().CreateInstance(
-      UDA_BASED_PULSE_COUNTER, PULSE_COUNTER_INTERFACE_INSTANCE, {HOST_INSTANCE, PORT_INSTANCE}));
-  }
   else
   {
     const std::string message =
diff --git a/src/lib/sup/pulse-counter-di/pulse_counter_di.cpp b/src/lib/sup/pulse-counter-di/pulse_counter_di.cpp
index 5566595..be3a439 100644
--- a/src/lib/sup/pulse-counter-di/pulse_counter_di.cpp
+++ b/src/lib/sup/pulse-counter-di/pulse_counter_di.cpp
@@ -42,11 +42,6 @@ const bool MemoryBasedPulseCounter_Registered =
   sup::di::GlobalObjectManager().RegisterFactoryFunction(MEMORY_BASED_PULSE_COUNTER,
     sup::di::ForwardingInstanceFactoryFunction<PulseCounterInterface, MemoryBasedPulseCounter>);
 
-const bool UDAPulseCounter_Registered =
-  sup::di::GlobalObjectManager().RegisterFactoryFunction(UDA_BASED_PULSE_COUNTER,
-    sup::di::ForwardingInstanceFactoryFunction<PulseCounterInterface, UDAPulseCounter,
-                                               const std::string&, int>);
-
 // Register PulseCounterProtocolClient/Server:
 
 const bool PulseCounterProtocolClient_Registered =
diff --git a/src/lib/sup/pulse-counter-di/registered_names.h b/src/lib/sup/pulse-counter-di/registered_names.h
index 7d85e3c..d1ce7b8 100644
--- a/src/lib/sup/pulse-counter-di/registered_names.h
+++ b/src/lib/sup/pulse-counter-di/registered_names.h
@@ -32,7 +32,6 @@ namespace pulse_counter
 // PulseCounterInterface classes:
 const std::string THREAD_SAFE_PULSE_COUNTER_DECORATOR = "ThreadSafePulseCounterDecorator";
 const std::string MEMORY_BASED_PULSE_COUNTER = "MemoryBasedPulseCounter";
-const std::string UDA_BASED_PULSE_COUNTER = "UDAPulseCounter";
 
 // PulseCounterProtocolClient/Server registered names:
 const std::string PULSE_COUNTER_PROTOCOL_CLIENT = "PulseCounterProtocolClient";
diff --git a/src/lib/sup/pulse-counter/CMakeLists.txt b/src/lib/sup/pulse-counter/CMakeLists.txt
index 8ae5912..8e42ddd 100644
--- a/src/lib/sup/pulse-counter/CMakeLists.txt
+++ b/src/lib/sup/pulse-counter/CMakeLists.txt
@@ -27,8 +27,6 @@ target_link_libraries(sup-pulse-counter
     pthread
     sup-dto::sup-dto
     sup-protocol::sup-protocol
-    uda_client_writer_cpp
-    _uda_client_reader_cpp
 )
 
   # -- Installation --
diff --git a/src/lib/sup/pulse-counter/base/CMakeLists.txt b/src/lib/sup/pulse-counter/base/CMakeLists.txt
index b391a67..f4c1e74 100644
--- a/src/lib/sup/pulse-counter/base/CMakeLists.txt
+++ b/src/lib/sup/pulse-counter/base/CMakeLists.txt
@@ -6,5 +6,4 @@ target_sources(sup-pulse-counter
   pulse_counter_type_utils.cpp
   pulse_counter_types.cpp
   thread_safe_pulse_counter_decorator.cpp
-  uda_pulse_counter.cpp
 )
diff --git a/src/lib/sup/pulse-counter/base/uda_pulse_counter.cpp b/src/lib/sup/pulse-counter/base/uda_pulse_counter.cpp
deleted file mode 100644
index 02e238b..0000000
--- a/src/lib/sup/pulse-counter/base/uda_pulse_counter.cpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/******************************************************************************
- * $HeadURL: $
- * $Id: $
- *
- * Project       : Supervision and Automation - Pulse Counter
- *
- * Description   : The definition and implementation for Pulse Counter functions in SUP.
- *
- * Author        : Walter Van Herck (IO)
- *
- * Copyright (c) : 2010-2023 ITER Organization,
- *                 CS 90 046
- *                 13067 St. Paul-lez-Durance Cedex
- *                 France
- *
- * This file is part of ITER CODAC software.
- * For the terms and conditions of redistribution or use of this software
- * refer to the file ITER-LICENSE.TXT located in the top level directory
- * of the distribution package.
- ******************************************************************************/
-
-#include <sup/pulse-counter/uda_pulse_counter.h>
-
-#include <sup/pulse-counter/pulse_counter_type_utils.h>
-
-#include <uda/idam/uda_client_writer_admin.h>
-
-#include <iostream>
-
-namespace
-{
-// Description can't be empty (the requirement on UDA side)
-const std::string kDefaultDescription("EMPTY");
-
-}  // unnamed namespace
-
-namespace sup
-{
-namespace pulse_counter
-{
-struct UDAPulseCounter::UDAPulseCounterImpl
-{
-  std::unique_ptr<UdaClientWriterAdmin> m_uda_writer;
-  UDAPulseCounterImpl(const std::string& host, int port)
-      : m_uda_writer(new UdaClientWriterAdmin(host, port))
-  {
-    m_uda_writer->resetAll();
-  }
-};
-
-UDAPulseCounter::UDAPulseCounter(const std::string& host, int port)
-    : p_impl(new UDAPulseCounterImpl(host, port))
-{}
-
-UDAPulseCounter::~UDAPulseCounter() = default;
-
-ActivityID UDAPulseCounter::GetUniqueID(ActivityTag activity_tag)
-{
-  auto tag = ActivityTagToString(activity_tag);
-
-  // Using default non-empty description for now. Later it will be rewritten by the user
-  // on WriteActivityStartData stage.
-  auto pulse_id = p_impl->m_uda_writer->addPulse(tag, kDefaultDescription.c_str());
-
-  return ActivityIDFromString(pulse_id);
-}
-
-ActivityID UDAPulseCounter::GetLastID(ActivityTag activity_tag) const
-{
-  auto tag = ActivityTagToString(activity_tag);
-
-  auto pulse_id = p_impl->m_uda_writer->getLastPulse2(tag.c_str());
-
-  return ActivityIDFromString(pulse_id);
-}
-
-bool UDAPulseCounter::WriteActivityStartData(const ActivityID& activity_id, BasicMetadata metadata)
-{
-  auto key = ActivityIDToString(activity_id);
-  std::string start_time = std::to_string(metadata.start_time);
-  std::string end_time = std::to_string(metadata.end_time);
-  std::string status = metadata.status;
-  std::string description = metadata.description;
-  description = description.empty() ? kDefaultDescription : description;
-
-  // UDA requires all strings non empty
-  err_t err = p_impl->m_uda_writer->injectPulse(key, start_time.c_str(), end_time.c_str(),
-                                                status.c_str(), description.c_str());
-
-  return err == 0;
-}
-
-bool UDAPulseCounter::WriteActivityEndData(const ActivityID& activity_id, BasicMetadata metadata)
-{
-  auto key = ActivityIDToString(activity_id);
-
-  // With current UDA API we can rewrite only all metadata.
-  // Let's retrieve current metadata, update end_time and status, and write it back.
-  auto current_metadata = GetMetadata(activity_id);
-
-  std::string start_time = std::to_string(current_metadata.start_time);
-  std::string end_time = std::to_string(metadata.end_time);
-  std::string status = metadata.status;
-  std::string description = current_metadata.description;
-
-  err_t err = p_impl->m_uda_writer->injectPulse(key, start_time.c_str(), end_time.c_str(),
-                                                status.c_str(), description.c_str());
-  return err == 0;
-}
-
-bool UDAPulseCounter::WriteActivityStatus(const ActivityID& activity_id,
-                                                const std::string& status)
-{
-  auto key = ActivityIDToString(activity_id);
-  err_t err = p_impl->m_uda_writer->setStatus(key, status.c_str());
-  return err == 0;
-}
-
-BasicMetadata UDAPulseCounter::GetMetadata(const ActivityID& activity_id) const
-{
-  // UdaClientReaderBase reader(p_impl->m_host, p_impl->m_port);
-
-  // reader.resetAll();
-
-  auto reader = p_impl->m_uda_writer.get();
-  if (reader->getErrorCode() != 0)
-  {
-    std::cout << "Error in UDAPulseCounter::GetMetadata(): Can't create UDA client reader"
-              << std::endl;
-    return EmptyBasicMetadata;
-  }
-
-  // reader->resetAll();
-
-  auto key = ActivityIDToString(activity_id);
-  UDA_PULSES_LIST2 pulse_info = reader->getPulseInfo2(key);
-
-  auto result = EmptyBasicMetadata;
-  result.start_time = pulse_info.timeFrom;
-  result.end_time = pulse_info.timeTo;
-  result.status = std::string(pulse_info.status);
-  result.description = std::string(pulse_info.description);
-  return result;
-}
-
-}  // namespace pulse_counter
-
-}  // namespace sup
-- 
2.45.2

