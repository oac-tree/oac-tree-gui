/******************************************************************************
 *
 * Project       : Graphical User Interface for SUP oac-tree
 *
 * Description   : Integrated development environment for oac-tree procedures
 *
 * Author        : Gennady Pospelov (IO)
 *
 * Copyright (c) : 2010-2025 ITER Organization,
 *                 CS 90 046
 *                 13067 St. Paul-lez-Durance Cedex
 *                 France
 * SPDX-License-Identifier: MIT
 *
 * This file is part of ITER CODAC software.
 * For the terms and conditions of redistribution or use of this software
 * refer to the file LICENSE located in the top level directory
 * of the distribution package.
 *****************************************************************************/

#include "operation_action_helper.h"

#include <oac_tree_gui/core/exceptions.h>
#include <oac_tree_gui/jobsystem/i_remote_connection_service.h>
#include <oac_tree_gui/jobsystem/objects/local_job_handler.h>
#include <oac_tree_gui/jobsystem/objects/remote_job_handler.h>
#include <oac_tree_gui/model/standard_job_items.h>
#include <oac_tree_gui/transform/domain_procedure_builder.h>

#include <sup/oac-tree/procedure.h>
#include <sup/oac-tree/sequence_parser.h>

namespace oac_tree_gui
{

std::unique_ptr<procedure_t> CreateDomainProcedure(const JobItem& item)
{
  // FIXME shouldn't the code below be replaced with virtual JobItem::CreateProcedure() ?

  if (item.GetType() == mvvm::GetTypeName<LocalJobItem>()
      || item.GetType() == mvvm::GetTypeName<ImportedJobItem>())
  {
    if (!item.GetProcedure())
    {
      throw RuntimeException("Procedure doesn't exist");
    }

    return CreateDomainProcedure(*item.GetProcedure());
  }

  if (auto file_based_job = dynamic_cast<const FileBasedJobItem*>(&item); file_based_job)
  {
    return sup::oac_tree::ParseProcedureFile(file_based_job->GetFileName());
  }

  throw RuntimeException("Can't create domain procedure");
}

std::function<std::unique_ptr<IJobHandler>(JobItem&)> GetJobHandlerFactoryFunc(
    const UserContext& user_context, IRemoteConnectionService& service)
{
  auto result = [user_context_copy = user_context,
                 &service](JobItem& item) -> std::unique_ptr<IJobHandler>
  {
    // local and imported JobItems' are handled by the same LocalJobHandler
    if (item.GetType() == mvvm::GetTypeName<LocalJobItem>()
        || item.GetType() == mvvm::GetTypeName<ImportedJobItem>()
        || item.GetType() == mvvm::GetTypeName<FileBasedJobItem>())
    {
      return std::make_unique<LocalJobHandler>(&item, user_context_copy);
    }

    if (item.GetType() == mvvm::GetTypeName<RemoteJobItem>())
    {
      // remote jobs need special RemoteJobHandler generated by the remote connection service
      return service.CreateJobHandler(dynamic_cast<RemoteJobItem*>(&item), user_context_copy);
    }

    throw RuntimeException("Unknown job type [" + item.GetType() + "]");
  };

  return result;
}

}  // namespace oac_tree_gui
