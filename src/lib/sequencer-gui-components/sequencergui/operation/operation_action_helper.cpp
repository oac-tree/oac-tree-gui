/******************************************************************************
 *
 * Project       : Graphical User Interface for SUP Sequencer
 *
 * Description   : Integrated development environment for Sequencer procedures
 *
 * Author        : Gennady Pospelov (IO)
 *
 * Copyright (c) : 2010-2024 ITER Organization,
 *                 CS 90 046
 *                 13067 St. Paul-lez-Durance Cedex
 *                 France
 *
 * This file is part of ITER CODAC software.
 * For the terms and conditions of redistribution or use of this software
 * refer to the file ITER-LICENSE.TXT located in the top level directory
 * of the distribution package.
 *****************************************************************************/

#include "operation_action_helper.h"

#include <sequencergui/core/exceptions.h>
#include <sequencergui/jobsystem/i_remote_connection_service.h>
#include <sequencergui/jobsystem/local_job_handler.h>
#include <sequencergui/jobsystem/remote_job_handler.h>
#include <sequencergui/model/standard_job_items.h>

namespace sequencergui
{

std::function<std::unique_ptr<IJobHandler>(JobItem&)> CreateJobHandlerFactoryFunc(
    const UserContext& user_context, IRemoteConnectionService& service)
{
  auto result = [user_context_copy = user_context,
                 &service](JobItem& item) -> std::unique_ptr<IJobHandler>
  {
    // local and imported JobItems' are handled by the same LocalJobHandler
    if (item.GetType() == LocalJobItem::Type || item.GetType() == ImportedJobItem::Type)
    {
      return std::make_unique<LocalJobHandler>(&item, user_context_copy);
    }

    if (item.GetType() == RemoteJobItem::Type)
    {
      // remote jobs need special RemoteJobHandler generated by the remote connection service
      return service.CreateJobHandler(dynamic_cast<RemoteJobItem*>(&item), user_context_copy);
    }

    throw RuntimeException("Unknown job type [" + item.GetType() + "]");
  };

  return result;
}

}  // namespace sequencergui
